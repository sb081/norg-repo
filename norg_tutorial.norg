@document.meta
title: norg tutorial
description:
authors: takuto
categories:
created: 2023-04-17
updated: 2023-10-02T19:40:05+0530
version: 1.0.0
@end

* Norg Tutorial
  *This page is generated from {./norg_tutorial.norg}[`./norg_tutorial.norg`]

** Useful Videos
   - {https://www.youtube.com/watch?v=NnmRVY22Lq8&list=PLx2ksyallYzVI8CN1JMXhEf62j2AijeDa}[From No Org to Neorg - Playlist]
   -- {https://youtu.be/NnmRVY22Lq8}[From No Org to Neorg - The Basics | #1]
   -- {https://youtu.be/Bi9JiW5nSig}[From No Org to Neorg - Workflow, Links | #2]
   -- ...

   I highly recommend you watch these videos by `Vhyrro`, the main contributor of {https://github.com/nvim-neorg/neorg/}[Neorg] plugin.

* How to Get Started
  The current implementations of `norg` format is mostly done with the {https://github.com/nvim-neorg/neorg/}[Neorg] plugin.

** Installation Guide
   Read this section. {https://github.com/nvim-neorg/neorg/#-installationquickstart}[Installation / Quickstart]

   - I'd recommend following the `Treesitter` section as well to install `tree-sitter-norg` spec.
   -- `run = ":Neorg sync-parsers",`
   - *Mac Users*: ensure that the CC environment variable points to a compiler that has C++14 support.
   -- Details written in github README.
   -- {https://github.com/nvim-neorg/tree-sitter-norg/issues/7#issuecomment-1291508121}[Issue and How to solve]

** Kickstart Config
   Here is my basic config. I'll explain about `plugins` in {* Plugins}.

   @code lua
{
     "nvim-neorg/neorg",
     ft = "norg",
     dependencies = {
       "nvim-treesitter/nvim-treesitter",
       "nvim-treesitter/nvim-treesitter-textobjects",
       "nvim-cmp",
       "nvim-lua/plenary.nvim",
     },
     build = ":Neorg sync-parsers",
     cmd = "Neorg",
    config = function()
      require("neorg").setup {
     load = {
       ["core.defaults"] = {},
       ["core.completion"] = { config = { engine = "nvim-cmp", name = "[Norg]" } },
       ["core.integrations.nvim-cmp"] = {},
       ["core.concealer"] = { config = { icon_preset = "diamond" } },
       ["core.export"] = {},
       ["core.dirman"] = {
            config = {
              workspaces = {
                life = "~/Desktop/ORG/life/",
                courses = "~/Desktop/ORG/life/courses"
              },
            },
        },
        -- Keybinds
       ["core.keybinds"] = {
         -- https://github.com/nvim-neorg/neorg/blob/main/lua/neorg/modules/core/keybinds/keybinds.lua
         config = {
           default_keybinds = true,
           neorg_leader = "<Leader><Leader>",
         },
       },
     }
    }
    end,
   }
   @end

   If you still have problems setting up `neorg`, `@d-r-a-b` explains more thoroughly in
   {https://gist.github.com/d-r-a-b/3af7083a018be15e6c1d1d2c5317e9c7}[Understanding Neorg dependencies].
   I'd really recommend this as well ðŸ˜„

* How to Write Your Notes
** Basics of Plugins
   There is a config option `config.load = {}` to define plugins you want to use.

   ,I decomposed that into a local var `plugins` in above code for simplicity tho.,

   More information about plugins in {* Plugins} section.
   I'd recommend just simply adding the ones already stated in {** Kickstart Config}.

** How to Write Notes
   Below text is a sample note which explains about the norg syntax.

   Run `:Neorg toggle-concealer` to see the raw text.

* Heading 1: {:1.0-specification:** Structural Detached Modifiers}
  Normal text here.
  Single new line will be ignored.

  Double new lines mean a new paragraph.

** Heading 2
   Indentation of normal text is advised to align with the start of the heading name.
   See? The indentation of this text is different from the ones in {* Heading 1}.

   Oh, BTW that's how you create in-document links. Literal heading name wrapped in `{}`.
   Press `<Enter>` on the link to jump to the definition.
   (case, space *in*-sensitive, punctuation *sensitive*).
   More about links in {* links}
   ---

  With `---`, you can decrease the heading level. This text is inside {* Heading 1} again.

  - Bullet List: {:1.0-specification:*** Unordered Lists}
  -- Second level bullet is with `--` and not an indented `-`.
  --- Third level
  -- Second level
  - In insert mode, press `<M-CR>` to create a new bullet.
  -- Press `<C-t>`, `<C-d>` to increase, decrease the level.
  -- More info can be found {https://github.com/nvim-neorg/neorg/wiki/Indent}[Wiki - Indent] or {https://github.com/nvim-neorg/neorg/blob/main/lua/neorg/modules/core/keybinds/keybinds.lua}[Raw code].

  ~ Numbered List: {:1.0-specification:*** Ordered Lists}
  ~~ It's `~`, not `1.` (Tho the conceal makes it look like that)
  -- Can be mixed with bullets as well.
  ~ Second

  {:1.0-specification:*** Quotes}
  > Quotes
  >> Quote level 2

  - You can use {:1.0-specification:*** TODO Status Extension}[TODO lists] in combination with these lists.
  -- I highly suggest reading this section as well.

* Links: {:1.0-specification:** Link Location}
  There are so so many types of useful links in `norg`.
  You can also press `<Enter>` on all links to open the appropriate application.
  (e.g. urls are opened in the browser.)

  Again, `Vhyrro` does a great job explaining about links in his video,
  {https://youtu.be/Bi9JiW5nSig?t=17m44s}[From No Org to Neorg #2: 17:44~] so go ahead and watch that video.

** Links TL;DR
   - URL: `{https://xxx.example.com}`
   -- URL with name: {https://github.com/nvim-neorg/neorg/}[Neorg GitHub]
   - Norg files
   -- Relative to current file: `{:foo/bar:}` -> `foo/bar.norg`
   -- Absolute path: `{:/tmp/foo/bar:}` -> `/tmp/foo/bar.norg`. (Also works with `~/` = `$HOME/`)
   -- Relative to current workspace: `{:$/foo/bar:}` -> `~/Norg/Notes/foo/bar.norg`
   -- Relative to different workspace: `{:$work/foo/bar:}` -> `~/Norg/work/foo/bar.norg`
   - Usual files: `{/ /path/to/file}`
   - Headings: {* Heading 1}
   -- Any level heading: {# Heading 2}

   *AND YOU CAN COMBINE THEM*
   - `Heading 1` of `foo/bar.norg`: {:foo/bar:* Heading 1}
   - Line numbers: {:foo/bar:4}

* Attached Modifiers
  - \*bold\*: *bold*
  - \/italic\/: /italic/
  - \_underline\_: _underline_
  - \-strike-through\-: -strike-through-
  - \!spoiler\!: !spoiler!
  - \^superscript\^: ^superscript^ (cannot be nested into `subscript`)
  - \,subscript\,: ,subscript, (cannot be nested into `superscript`)
  - \`inline code\`: `inline code` (disables any nested markup - verbatim)
  - \%{** Null Modifier}[null modifier]\%: %null modifier%
  - \$inline math\$: $f(x) = y$ (verbatim)
  - \&variable\&: &variable& (verbatim)

** Export
   You can convert your `norg` notes to different formats.

   `:Neorg export to-file foo.md` -> Exports to `foo.md` in markdown format.

   This is a function to export to `suffix` with the same dir and name of current file.
   @code lua
   local export_file = function(suffix, open_preview)
     local dst = vim.fn.fnamemodify(vim.fn.expand("%"), ":~:.:r") .. suffix -- same name but with suffix
     vim.cmd(string.format([[Neorg export to-file %s]], string.gsub(dst, " ", [[\ ]])))
     vim.schedule(function()
       vim.cmd.edit(dst)
       if suffix == ".md" and open_preview then
         vim.cmd([[MarkdownPreview]]) -- https://github.com/iamcco/markdown-preview.nvim
       end
     end)
   end
   -- export_file(".md", true)
   @end

* Plugins
  Keys passed to `config.load` are name of plugins. Their documents can be found in
  {https://github.com/nvim-neorg/neorg/wiki}[Neorg - Wiki] -> Pages.

  I already mentioned the necessary ones in {** Kickstart Config}, but here are ones I personally use on top of them.
  @code lua
  local plugins = {
    ... -- ones mentioned in {** Kickstart Config}
    ["core.esupports.metagen"] = { config = { type = "auto", update_date = true } },
    ["core.qol.toc"] = {},
    ["core.qol.todo_items"] = {},
    ["core.looking-glass"] = {},
    ["core.presenter"] = { config = { zen_mode = "zen-mode" } },
    ["core.journal"] = {
      config = {
        strategy = "flat",
        workspace = "Notes",
      },
    },
    ["core.dirman"] = {
      config = {
        workspaces = {
          Notes = "~/Nextcloud/Notes",
          Work = "~/Nextcloud/Work",
        }
      }
    },
  }
  @end

** Notes
*** `core.dirman`
    This plugin is very recommended. It manages what are called /workspaces/.

    You can define multiple workspaces at `config["core.dirman"].config.workspaces`, and open with
    command `:Neorg workspace <name-of-workspace>`.
    This command opens `/path/to/workspace/index.norg` which is like the entry point file.

    Norg files inside a workspace can be linked with `{:$<name-of-workspace>/path/to/file:}`.

    So for example, inside workspace `Notes = "~/Nextcloud/Notes"`,
    `~/Nextcloud/Notes/journal/2023-04-16.norg` would be `{:$Notes/journal/2023-04-16:}`.
    Or, it can be abbreviated to `$/` when referring from files in the same workspace.

*** `core.journal`
    This adds commands `:Neorg journal {today,tomorrow,yesterday}`,
    which opens norg file with the appropriate date as name.

    Great for diary :)

*** `core.keybinds`
    To register `norg` file specific keybinds, read this page: {https://github.com/nvim-neorg/neorg/wiki/User-Keybinds}[Neorg - Wiki - User-Keybinds].

** Your Own Module
   If you want to create your own plugin for neorg, this video is very useful.
   {https://www.youtube.com/watch?v=j4lTvIGRhmw&list=PLxpY86LRR3B0rtOBjXAsq1XnsOt4m4owu}[YouTube - Neorg Custom Modules]

   Here's one external module I implemented. {https://github.com/pysan3/neorg-templates-draft}
   which adds support for template files with the power of `LuaSnip`.

   Feel free to explorer the code.

* Explore More Norg
** {https://github.com/NTBBloodbath/awesome-neorg}[Awesome Neorg]
   > A collection of awesome Neorg notes, software and resources.

   - You might find more useful neorg external modules to integrate to your workflow.

** {https://github.com/orgs/nvim-neorg/repositories}[Other Official Projects]
   There are many other projects going on around the `norg` format.

** GitHub Tags
   Of course you can search through GitHub with tags.
   - `norg`: {https://github.com/topics/norg}
   -- More likely to find external modules.
   - `neorg` {https://github.com/topics/neorg}
   -- More likely to find personal dotfiles and other configs.

** Discord
   More, alpha stage concepts are discussed in the Discord channel.

   Feel free to join: {https://discord.gg/T6EgTAX7ht}

* Tips
** Embed Images
   As far as I know, there are *NO* specifications about how to embed / link to an image.

*** Discussions
    - {https://github.com/nvim-neorg/neorg/discussions/768}[Is there any way to insert a image just like kitty icat does #768]
    - {https://github.com/nvim-neorg/neorg/discussions/791}[render.nvim #791]
    ---

*** Workaround

    As a workaround, funny enough, you can prepend a link with `!` like `!{path}[name]` to link to an image,
    which will be correctly converted to image tag when exported to markdown files.
    (Of course this only works with markdown and I hope this will not become the correct way.)
    @code norg
    !{https://user-images.githubusercontent.com/76052559/150838408-1a021d7b-1891-4cab-b16e-6b755e741e87.png}[Norg format]
    @end
    Example:
    !{https://user-images.githubusercontent.com/76052559/150838408-1a021d7b-1891-4cab-b16e-6b755e741e87.png}[Norg format]

** Sync with Git, Nextcloud, etc
   *BACKUP YOUR NOTES*

*** Nextcloud, Edit on Your Phone
    If you use selfhosted Nextcloud, you can edit your `norg` notes from your phone.

**** After Logging In
     ~ Install {https://apps.nextcloud.com/apps/notes}[Notes app]
     ~ Go to {https://nextcloud.your.domain/apps/notes}
     ~ Go down to `Notes settings`
     ~ Change `File extension for new notes`
     -- `User defined` -> `.norg`

**** On Your Phone
     ~ Access page with safari. ,I'm sorry but I use iPhone...,
     -- Shoud work on other phones as well tho.
     ~ Go to {https://nextcloud.your.domain/apps/notes}
     ~ Press `share` to `Add page to home`.
     ~ You have a new app that jumps directly to notes

**** Notes
     - Might not work if you have {https://github.com/nextcloud/text}[Text] app installed
